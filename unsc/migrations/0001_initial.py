# Generated by Django 3.0.6 on 2021-05-24 18:24

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=255, unique=True)),
                ('address_line_1', models.CharField(max_length=255)),
                ('address_line_2', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=255)),
                ('country', models.CharField(max_length=255)),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('is_active', models.BooleanField(default=False)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Companies',
            },
        ),
        migrations.CreateModel(
            name='Compliance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('match', models.CharField(choices=[('Positive_Match', 'Positive_Match'), ('Possible_Match', 'Possible_Match'), ('Negative_Match', 'Negative_Match'), ('Other', 'Other')], max_length=64)),
                ('information', models.TextField()),
                ('is_complete', models.BooleanField(default=False)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='unsc.Company')),
            ],
        ),
        migrations.CreateModel(
            name='ComplianceOfficer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=False)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='unsc.Company')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='power_user', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Compliance Officers',
            },
        ),
        migrations.CreateModel(
            name='UNSCList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('memo_name', models.CharField(db_index=True, max_length=255)),
                ('is_active', models.BooleanField(default=False)),
                ('expired', models.BooleanField(default=False)),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'UNSCLists',
            },
        ),
        migrations.CreateModel(
            name='UNSCType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('memo_type', models.CharField(choices=[('Santions List', 'Santions List'), ('Recommendations', 'Recommendations'), ('Memorandum', 'Memorandum')], max_length=64, unique=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UNSCMemoTableFunction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('memo_type', models.CharField(max_length=64)),
                ('is_exist', models.BooleanField(default=False)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='unsc.Company')),
                ('memo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='unsc.UNSCList')),
            ],
        ),
        migrations.AddField(
            model_name='unsclist',
            name='memo_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='unsc.UNSCType'),
        ),
        migrations.CreateModel(
            name='Regulator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('regulator', models.CharField(choices=[('NBFIRA', 'NBFIRA'), ('BICA', 'BICA'), ('FIA', 'FIA'), ('Other', 'Other')], max_length=64, unique=True)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PositiveCompliance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('unsc_reference_number', models.CharField(max_length=50)),
                ('list_type', models.CharField(choices=[('Individual', 'Individual'), ('Entity', 'Entity'), ('Other', 'Other')], max_length=64)),
                ('list_name_1', models.CharField(max_length=255)),
                ('list_name_2', models.CharField(max_length=255)),
                ('list_name_3', models.CharField(max_length=255)),
                ('action', models.CharField(choices=[('Freeze_Individual', 'Freeze_Individual'), ('Freeze_Entity', 'Freeze_Entity'), ('Delist_Individual', 'Delist_Individual'), ('Delist_Entity', 'Delist_Entity')], max_length=64)),
                ('information', models.TextField()),
                ('is_complete', models.BooleanField(default=False)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='unsc.Company')),
                ('compliance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='unsc.Compliance')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('officer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='unsc.ComplianceOfficer')),
            ],
        ),
        migrations.AddField(
            model_name='compliance',
            name='memo_name',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='unsc.UNSCList'),
        ),
        migrations.AddField(
            model_name='compliance',
            name='officer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='unsc.ComplianceOfficer'),
        ),
        migrations.CreateModel(
            name='CompanyType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_type', models.CharField(choices=[('Bank', 'Bank'), ('Micro Lender', 'Micro Lender'), ('Insurer', 'Insurer'), ('Asset Management', 'Asset Management'), ('Lawyers', 'Lawyers')], max_length=64, unique=True)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='company',
            name='company_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='unsc.CompanyType'),
        ),
        migrations.AddField(
            model_name='company',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='company',
            name='regulator',
            field=models.ManyToManyField(to='unsc.Regulator'),
        ),
        migrations.AddConstraint(
            model_name='unscmemotablefunction',
            constraint=models.UniqueConstraint(fields=('memo', 'company'), name='possible_memo_per_company'),
        ),
        migrations.AddConstraint(
            model_name='positivecompliance',
            constraint=models.UniqueConstraint(fields=('compliance', 'company', 'unsc_reference_number'), name='one_positive_compliance_reference_company'),
        ),
        migrations.AddConstraint(
            model_name='compliance',
            constraint=models.UniqueConstraint(fields=('memo_name', 'company'), name='one_memo_per_company'),
        ),
    ]
